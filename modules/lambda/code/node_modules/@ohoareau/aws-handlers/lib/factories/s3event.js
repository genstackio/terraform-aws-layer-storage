"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_1 = require("@ohoareau/aws");
const topper_1 = require("@ohoareau/topper");
const plugin = (source, { archive = true, run, ruleName, plugins, targetBucket = undefined, processedDir = 'archived/processed/:rule', errorsDir = 'archived/errors/:rule' }) => async (bucket, key) => {
    ruleName = ruleName || 'unknown-rule';
    targetBucket = targetBucket || bucket;
    let p = plugins[source];
    ('function' === typeof p) && (p = {
        execute: p,
    });
    const defaultInit = (async (x) => ({ ...x }));
    processedDir = processedDir.replace(':rule', ruleName);
    errorsDir = errorsDir.replace(':rule', ruleName);
    const getData = async () => aws_1.s3.getFileContent({ bucket, key, raw: true });
    const getTargetObject = to => ({ bucket: targetBucket, key: `${to ? to : ''}${to ? '/' : ''}${key}` });
    const copyFileFactory = to => async () => aws_1.s3.setFileContent(getTargetObject(to), await getData());
    const ctx = await (p.init || defaultInit)({ source, run, log: console.log, error: console.error });
    const processedTargetObject = getTargetObject(processedDir);
    const errorsTargetObject = getTargetObject(errorsDir);
    const formatObjectPath = o => `s3://${o.bucket}/${o.key}`;
    const processedTargetPath = formatObjectPath(processedTargetObject);
    const errorsTargetPath = formatObjectPath(errorsTargetObject);
    const defaults = { getData, bucket, key, source };
    const originalPath = formatObjectPath({ bucket, key });
    await run(['process', `rule: ${ruleName}, file: ${originalPath}`], async () => {
        p.load && (await run(['load', `file: ${originalPath}`], async () => p.load({ ...defaults }, ctx)));
        p.execute && (await run('execute', async () => p.execute({ ...defaults }, ctx)));
        archive && await run(['archive', processedTargetPath], copyFileFactory(processedDir));
    }, async (e) => {
        p.fail && (await run('fail', async () => p.fail({ ...defaults, error: e }, ctx)));
        archive && await run(['archive', errorsTargetPath], copyFileFactory(errorsDir));
        ctx.error(`File '${originalPath}' failed to be imported: ${e.message}`);
    }, async () => {
        p.clean && (await p.clean({ ...defaults }, ctx));
    });
};
const consumeS3 = ({ eventType = 'ObjectCreated', plugins = undefined, rules = [], ...rest }) => async (record) => {
    const bucket = record.s3.bucket['name'];
    const key = record.s3.object.key;
    const isHandledEventRecord = new RegExp(`^${eventType}`).test(record.eventName);
    const isDirectory = ('/' === key.charAt(key.length - 1));
    if (!isHandledEventRecord || isDirectory) {
        console.log(`Ignoring non-handled object '${key}' from bucket '${bucket}'.`);
        return;
    }
    const run = topper_1.createRunner();
    const hits = rules.reduce((acc, rule) => {
        rule = { clean: true, archive: true, ...rule };
        const patterns = rule.match ? (Array.isArray(rule.match) ? rule.match : [rule.match]) : [];
        const ignorePatterns = rule.ignore ? (Array.isArray(rule.ignore) ? rule.ignore : [rule.ignore]) : [];
        const foundPatternMatch = patterns.find(p => key.match(p));
        const foundIgnorePatternMatch = ignorePatterns.find(p => key.match(p));
        foundPatternMatch && !foundIgnorePatternMatch && acc.push({ rule, bucket, key });
        return acc;
    }, []);
    let error = undefined;
    const { clean } = hits.reduce((acc, item) => {
        !item.clean && (acc.clean = false);
        return acc;
    }, { clean: true });
    try {
        await Promise.all(hits.map(async (hit) => {
            let fn = hit.rule.function;
            let localPlugins = plugins;
            if (hit.rule.plugin) {
                let pName = hit.rule.plugin;
                if ('string' !== typeof pName) {
                    localPlugins = { default: pName };
                    pName = 'default';
                }
                fn = plugin(pName, { ...rest, run, ruleName: hit.rule.name, plugins: localPlugins, archive: !!hit.rule.archive });
            }
            return fn(hit.bucket, hit.key);
        }));
    }
    catch (e) {
        error = e;
    }
    if (hits.length) {
        clean && (await run('clean', async () => aws_1.s3.deleteFile({ bucket, key })));
    }
    else {
        console.log(`incoming ${bucket}:${key} => IGNORED`);
    }
    if (error)
        throw error;
};
const consumerFactories = config => ({
    'aws:s3': consumeS3(config),
});
exports.default = config => async ({ Records = [] }) => {
    const consumers = consumerFactories(config);
    return Promise.all(Records.map(async (record) => (consumers[record['eventSource']] || (() => { }))(record)));
};
//# sourceMappingURL=data:application/json;base64,