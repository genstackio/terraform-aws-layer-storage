"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTopper = ({ info, log, error } = {}) => {
    const ctx = { info, timers: {} };
    const duration = b => Math.round((ctx.timers[`stop_${b}`] - ctx.timers[`start_${b}`])) / 1000;
    return {
        start: (b, info = undefined) => {
            ctx.timers[`start_${b}`] = Date.now();
            log && log(`[${b}] STARTED ${(info || ctx.info) ? (info || ctx.info) : ''}`);
        },
        stop: (b, info = undefined) => {
            ctx.timers[`stop_${b}`] = Date.now();
            log && log(`[${b}] COMPLETED in ${duration(b)}s ${(info || ctx.info) ? (info || ctx.info) : ''}`);
        },
        fail: (b, info = undefined) => {
            ctx.timers[`stop_${b}`] = Date.now();
            error && error(`[${b}] FAILED in ${duration(b)}s ${info ? ('string' === typeof info ? info : (info && info.message ? info.message : '')) : ''}`);
        },
        duration,
    };
};
exports.createRunner = (topper) => async (x, tryCallback = undefined, catchCallback = undefined, finallyCallback = undefined) => {
    topper = topper || exports.createTopper({ log: console.log, error: console.error });
    x = Array.isArray(x) ? x : [x];
    let result;
    try {
        topper.start(...x);
        result = tryCallback && (await tryCallback());
        topper.stop(x[0]);
    }
    catch (e) {
        topper.fail(x[0], e);
        if (catchCallback) {
            await catchCallback(e);
        }
        else {
            throw e;
        }
    }
    finally {
        finallyCallback && (await finallyCallback());
    }
    return result;
};
exports.default = exports.createTopper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPYSxRQUFBLFlBQVksR0FBRyxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEtBQXVELEVBQUUsRUFBVSxFQUFFO0lBQy9HLE1BQU0sR0FBRyxHQUFHLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQXFELENBQUM7SUFDbkYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM5RixPQUFPO1FBQ0gsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxTQUFTLEVBQUUsRUFBRTtZQUMzQixHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDdEMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRixDQUFDO1FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxTQUFTLEVBQUUsRUFBRTtZQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDckMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0RyxDQUFDO1FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxTQUFTLEVBQUUsRUFBRTtZQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDckMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JKLENBQUM7UUFDRCxRQUFRO0tBQ1gsQ0FBQTtBQUNMLENBQUMsQ0FBQztBQUVXLFFBQUEsWUFBWSxHQUFHLENBQUMsTUFBZSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQ2xELENBQUMsRUFDRCxjQUFrQyxTQUFTLEVBQzNDLGdCQUFvQyxTQUFTLEVBQzdDLGtCQUFzQyxTQUFTLEVBQ2pELEVBQUU7SUFDQSxNQUFNLEdBQUcsTUFBTSxJQUFJLG9CQUFZLENBQUMsRUFBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixJQUFJLE1BQU0sQ0FBQztJQUNYLElBQUk7UUFDQSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUksQ0FBcUIsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxXQUFXLElBQUksQ0FBQyxNQUFNLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxhQUFhLEVBQUU7WUFDZixNQUFNLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQjthQUFNO1lBQ0gsTUFBTSxDQUFDLENBQUM7U0FDWDtLQUNKO1lBQVM7UUFDTixlQUFlLElBQUksQ0FBQyxNQUFNLGVBQWUsRUFBRSxDQUFDLENBQUM7S0FDaEQ7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUM7QUFHRixrQkFBZSxvQkFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgdG9wcGVyID0ge1xuICAgIHN0YXJ0OiAoYjogc3RyaW5nLCBpbmZvPzogYW55KSA9PiB2b2lkLFxuICAgIHN0b3A6IChiOiBzdHJpbmcsIGluZm8/OiBhbnkpID0+IHZvaWQsXG4gICAgZmFpbDogKGI6IHN0cmluZywgaW5mbz86IGFueSkgPT4gdm9pZCxcbiAgICBkdXJhdGlvbjogKGI6IHN0cmluZykgPT4gbnVtYmVyLFxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRvcHBlciA9ICh7aW5mbywgbG9nLCBlcnJvcn06IHtpbmZvPzogc3RyaW5nLCBsb2c/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbn0gPSB7fSk6IHRvcHBlciA9PiB7XG4gICAgY29uc3QgY3R4ID0ge2luZm8sIHRpbWVyczoge319IGFzIHtpbmZvPzogc3RyaW5nLCB0aW1lcnM6IHtba2V5OiBzdHJpbmddOiBudW1iZXJ9fTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IGIgPT4gTWF0aC5yb3VuZCgoY3R4LnRpbWVyc1tgc3RvcF8ke2J9YF0gLSBjdHgudGltZXJzW2BzdGFydF8ke2J9YF0pKSAvIDEwMDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IChiLCBpbmZvID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICBjdHgudGltZXJzW2BzdGFydF8ke2J9YF0gPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgbG9nICYmIGxvZyhgWyR7Yn1dIFNUQVJURUQgJHsoaW5mbyB8fCBjdHguaW5mbykgPyAoaW5mbyB8fCBjdHguaW5mbykgOiAnJ31gKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcDogKGIsIGluZm8gPSB1bmRlZmluZWQpID0+IHtcbiAgICAgICAgICAgIGN0eC50aW1lcnNbYHN0b3BfJHtifWBdID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGxvZyAmJiBsb2coYFske2J9XSBDT01QTEVURUQgaW4gJHtkdXJhdGlvbihiKX1zICR7KGluZm8gfHwgY3R4LmluZm8pID8gKGluZm8gfHwgY3R4LmluZm8pIDogJyd9YCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IChiLCBpbmZvID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICBjdHgudGltZXJzW2BzdG9wXyR7Yn1gXSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBlcnJvciAmJiBlcnJvcihgWyR7Yn1dIEZBSUxFRCBpbiAke2R1cmF0aW9uKGIpfXMgJHtpbmZvID8gKCdzdHJpbmcnID09PSB0eXBlb2YgaW5mbyA/IGluZm8gOiAoaW5mbyAmJiBpbmZvLm1lc3NhZ2UgPyBpbmZvLm1lc3NhZ2UgOiAnJykpIDogJyd9YCk7XG4gICAgICAgIH0sXG4gICAgICAgIGR1cmF0aW9uLFxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSdW5uZXIgPSAodG9wcGVyPzogdG9wcGVyKSA9PiBhc3luYyAoXG4gICAgeCxcbiAgICB0cnlDYWxsYmFjazogRnVuY3Rpb258dW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgIGNhdGNoQ2FsbGJhY2s6IEZ1bmN0aW9ufHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgICBmaW5hbGx5Q2FsbGJhY2s6IEZ1bmN0aW9ufHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuKSA9PiB7XG4gICAgdG9wcGVyID0gdG9wcGVyIHx8IGNyZWF0ZVRvcHBlcih7bG9nOiBjb25zb2xlLmxvZywgZXJyb3I6IGNvbnNvbGUuZXJyb3J9KTtcbiAgICB4ID0gQXJyYXkuaXNBcnJheSh4KSA/IHggOiBbeF07XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICB0b3BwZXIuc3RhcnQoLi4uKHggYXMgW2FueSwgLi4uYW55W11dKSk7XG4gICAgICAgIHJlc3VsdCA9IHRyeUNhbGxiYWNrICYmIChhd2FpdCB0cnlDYWxsYmFjaygpKTtcbiAgICAgICAgdG9wcGVyLnN0b3AoeFswXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0b3BwZXIuZmFpbCh4WzBdLCBlKTtcbiAgICAgICAgaWYgKGNhdGNoQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGF3YWl0IGNhdGNoQ2FsbGJhY2soZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZmluYWxseUNhbGxiYWNrICYmIChhd2FpdCBmaW5hbGx5Q2FsbGJhY2soKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRvcHBlciJdfQ==